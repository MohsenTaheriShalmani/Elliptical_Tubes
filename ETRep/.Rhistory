devtools::document()
tube_Surface_Mesh <- function(tube,
meshType="quadrilateral",
plotMesh=TRUE,
color='blue',
decorate=TRUE) {
slicingEllipsoids<-tube$slicingEllipsoids
spinePoints<-tube$spinalPoints3D
N <- dim(slicingEllipsoids)[3]  # Number of ellipses
M <- dim(slicingEllipsoids)[1]  # Number of points per ellipse
# Compute vertices (M * N rows)
vertices_list <- lapply(1:N, function(j) slicingEllipsoids[, , j])
vertices <- do.call(rbind, vertices_list)
vertices <- t(cbind(vertices, rep(1, nrow(vertices))))
# Build quad faces
quads <- matrix(0, nrow = 4, ncol = M * (N - 1))
face_idx <- 1
for (j in 1:(N - 1)) {
for (i in 1:M) {
i_next <- if (i < M) i + 1 else 1
v1 <- (j - 1) * M + i
v2 <- (j - 1) * M + i_next
v3 <- j * M + i_next
v4 <- j * M + i
quads[, face_idx] <- c(v1, v2, v3, v4)
face_idx <- face_idx + 1
}
}
quad_mesh <- rgl::qmesh3d(vertices = vertices,
indices = quads)
if(meshType=="quadrilateral"){
if(plotMesh==TRUE){
rgl::open3d()
rgl::shade3d(quad_mesh,color=color)
if(decorate==TRUE){
rgl::decorate3d()
}
}
return(quad_mesh)
}else if(meshType=="triangular"){
# Extract quad faces and vertex buffer
quads <- quad_mesh$ib
vb <- quad_mesh$vb
n_quads <- ncol(quads)
triangles <- matrix(0, nrow = 3, ncol = 2 * n_quads)
for (i in 1:n_quads) {
v1 <- quads[1, i]
v2 <- quads[2, i]
v3 <- quads[3, i]
v4 <- quads[4, i]
# Triangle 1: v1, v2, v3
triangles[, 2 * i - 1] <- c(v1, v2, v3)
# Triangle 2: v1, v3, v4
triangles[, 2 * i] <- c(v1, v3, v4)
}
# Create a triangle mesh
tri_mesh<-rgl::tmesh3d(vertices = vb, indices = triangles, homogeneous = TRUE)
if(plotMesh==TRUE){
rgl::open3d()
rgl::shade3d(tri_mesh,color=color)
if(decorate==TRUE){
rgl::decorate3d()
}
}
return(tri_mesh)
}else{
stop("Please choose quadrilateral or triangular for meshType!")
}
}
tube_Surface_Mesh(tube = tube_B)
help(is.SO3)
devtools::clean_dll()
help(rtruncnorm)
devtools::clean_dll()
devtools::document()
devtools::document()
rm(tube_Surface_Mesh)
devtools::document()
rm(list = ls())
devtools::load_all()
rm(list = ls())
devtools::clean_dll()
devtools::clean_dll()
devtools::document()
rm(list = ls())
devtools::document()
data("simulatedColons")
data("simulatedColons")
nonIntrinsic_mean<-
nonIntrinsic_mean_tube(tubes = simulatedColons,
plotting = FALSE)
# Plotting
plot_Elliptical_Tube(tube = nonIntrinsic_mean,
plot_frames = FALSE,
plot_skeletal_sheet = FALSE,
plot_r_project = FALSE,
plot_r_max = FALSE,
add = FALSE)
data("tube_A")
data("tube_B")
numberOfSteps <- 10
transformation_Tubes<-
intrinsic_Transformation_Elliptical_Tubes(
tube1 = tube_A,tube2 = tube_B,
numberOfSteps = numberOfSteps,
plotting = TRUE)
transformation_Tubes<-
nonIntrinsic_Transformation_Elliptical_Tubes(
tube1 = tube_A,tube2 = tube_B,
numberOfSteps = numberOfSteps,
plotting = TRUE)
devtools::document()
tube_Surface_Mesh(tube = tube_A)
remove.packages("ETRep")
tube_Surface_Mesh(tube = tube_B)
tube_Surface_Mesh(tube = ETRep::colon3D)
