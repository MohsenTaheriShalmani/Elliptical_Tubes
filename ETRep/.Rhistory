# Plot
plot_Elliptical_Tube(e_tube = tube_B,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = FALSE)
save(tube_A,file = "tube_A.Rdata")
save(tube_B,file = "tube_B.Rdata")
getwd()
# Simulation
numberOfSimulation<-5
# Scenario 1 simulation based on small variation
sd_v=1e-03
sd_psi=1e-03
sd_x=1e-04
sd_a=1e-04
sd_b=1e-04
# Load data
load("files/colone3D.Rdata")
referenceTube<-colone3D
numberOfFrames<-nrow(referenceTube$spinalPoints3D)
numberOfEllispePoints<-nrow(referenceTube$slicingEllipsoids[,,1])
# Plot the reference tube
plot_Elliptical_Tube(referenceTube,
plot_spine = TRUE,
plot_frames = FALSE,
decorate = FALSE,
plot_skeletal_sheet = FALSE,
plot_r_project = FALSE)
# Simulation
numberOfSimulation<-5
# Scenario 1 simulation based on small variation
sd_v=1e-03
sd_psi=1e-03
sd_x=1e-04
sd_a=1e-04
sd_b=1e-04
if(TRUE){
set.seed(2)
simulatedTubes<-simulate_etube(referenceTube = referenceTube,
numberOfSimulation=numberOfSimulation,
sd_v=sd_v,
sd_psi=sd_psi,
sd_x=sd_x,
sd_a=sd_a,
sd_b=sd_b,
rangeSdScale=c(1,2),
plotting=FALSE)
boundaryPointsAllTubes<-array(NA,dim = c(numberOfFrames*numberOfEllispePoints,3,length(simulatedTubes)))
for (j in 1:length(simulatedTubes)) {
boundaryPointsAllTubes[,,j]<-simulatedTubes[[j]]$boundaryPoints
}
procAll<-procGPA(boundaryPointsAllTubes,scale = FALSE,reflect = FALSE)
procAlignedTubes<-procAll$rotated
# plot simulated tubes
open3d()
for (j in 1:dim(procAlignedTubes)[3]) {
color_spectrum <- colorRampPalette(c("grey","darkgrey"))
colors <- color_spectrum(length(simulatedTubes))
plotProcTube(boundaryPoints = procAlignedTubes[,,j],
numberOfEllispePoints = dim(referenceTube$slicingEllipsoids[,,1])[1],
colorBoundary = colors[j],
colorSpine = "black")
}
#decorate3d()
mean_intrinsic<-intrinsic_mean_tube(tubes = simulatedTubes,
type = "sizeAndShapeAnalysis",
plotting = FALSE)
mean_nonIntrinsic<-nonIntrinsic_mean_tube(tubes = simulatedTubes,
type = "sizeAndShapeAnalysis",
plotting = FALSE)
procMean<-procAll$mshape
#proc alignment for visualization
boundaryPointsIntrinsicMean<-mean_intrinsic$boundaryPoints
boundaryPointsNonIntrinsicMean<-mean_nonIntrinsic$boundaryPoints
procOPAMeans1<-procOPA(A = procMean,B = boundaryPointsIntrinsicMean,scale = FALSE,reflect = FALSE)
intrinsicMeanProcAligned<-procOPAMeans1$Bhat
procOPAMeans2<-procOPA(A = procMean,B = boundaryPointsNonIntrinsicMean,scale = FALSE,reflect = FALSE)
nonIntrinsicMeanProcAligned<-procOPAMeans2$Bhat
#plot intrinsic mean
open3d()
#plot non-intrinsic mean
plotProcTube(boundaryPoints = intrinsicMeanProcAligned,
numberOfEllispePoints = dim(referenceTube$slicingEllipsoids[,,1])[1],
colorBoundary = "darkblue",
colorSpine = "black")
#plot non-intrinsic mean
plotProcTube(boundaryPoints = nonIntrinsicMeanProcAligned,
numberOfEllispePoints = dim(referenceTube$slicingEllipsoids[,,1])[1],
colorBoundary = "red",
colorSpine = "black")
#plot proc mean
plotProcTube(boundaryPoints = procMean,
numberOfEllispePoints = dim(referenceTube$slicingEllipsoids[,,1])[1],
colorBoundary = "darkgreen",
colorSpine = "black")
}
simulatedColones<-simulatedTubes
save(simulatedColones,file = "simulatedColones.Rdata")
help("gorf.dat")
simulatedColons<-simulatedColones
save(simulatedColons,file = "simulatedColons.Rdata")
nrow(tube_A$spinalPoints3D)
nrow(tube_B$spinalPoints3D)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
colon3D
colone3D
colon3D<-colone3D
save(colon3D,file = "colon3D.Rdata")
devtools::load_all()
devtools::document()
devtools::document()
help("colon3D")
help("simulatedColons")
devtools::document()
devtools::document()
check_Tube_Legality(colon3D)
devtools::document()
devtools::document()
devtools::load_all()
load(colon3D)
devtools::document()
devtools::load_all()
data(colon3D)
warnings()
devtools::clean_dll() # Clean package compiled files
colon3D
devtools::load_all()
colon3D
devtools::document() # Update documentation
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::check() # Run checks
save(tube_A,file = "tube_A.rda")
save(tube_B,file = "tube_B.rda")
save(colon3D,file = "colon3D.rda")
save(simulatedColons,file = "simulatedColons.rda")
data("colon3D")
data("simulatedColons")
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
# Load tube
data("colon3D")
sd_v=1e-01
sd_psi=1e-01
sd_x=1e-04
sd_a=1e-04
sd_b=1e-04
simulate_etube(referenceTube = colon3D, numberOfSimulation = 5, sd_v = sd_v, sd_psi = sd_psi, sd_x = sd_x, sd_a = sd_a, sd_b = sd_b, rangeSdScale = c(1, 2), plotting = TRUE)
data("colon3D")
sd_v=1e-03
sd_psi=1e-03
sd_x=1e-04
sd_a=1e-04
sd_b=1e-04
simulate_etube(referenceTube = colon3D, numberOfSimulation = 5, sd_v = sd_v, sd_psi = sd_psi, sd_x = sd_x, sd_a = sd_a, sd_b = sd_b, rangeSdScale = c(1, 2), plotting = TRUE)
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
data("colon3D")
#Set Parameters
sd_v<-sd_psi<-1e-03
sd_x<-sd_a<-sd_b<-1e-04
numberOfSimulation<-5
random_Tubes<-simulate_etube(referenceTube = colon3D, numberOfSimulation = numberOfSimulation, sd_v = sd_v, sd_psi = sd_psi, sd_x = sd_x, sd_a = sd_a, sd_b = sd_b, rangeSdScale = c(1, 2), plotting = FALSE)
# Plotting
for (i in 1:numberOfSimulation) {
plot_Elliptical_Tube(e_tube = random_Tubes[[i]],plot_frames = FALSE,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = TRUE)
}
# Plotting
for (i in 1:numberOfSimulation) {
plot_Elliptical_Tube(e_tube = random_Tubes[[i]],colorBoundary = "lightblue",plot_frames = FALSE,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = TRUE)
}
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
FALSE
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
data("colon3D")
#Set Parameters
sd_v<-sd_psi<-1e-03
sd_x<-sd_a<-sd_b<-1e-04
numberOfSimulation<-5
random_Tubes<-simulate_etube(referenceTube = colon3D, numberOfSimulation = numberOfSimulation, sd_v = sd_v, sd_psi = sd_psi, sd_x = sd_x, sd_a = sd_a, sd_b = sd_b, rangeSdScale = c(1, 2), plotting = FALSE)
# Plotting
for (i in 1:numberOfSimulation) {
plot_Elliptical_Tube(e_tube = random_Tubes[[i]],plot_frames = FALSE,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = TRUE)
}
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::release()
devtools::spell_check()
devtools::release()
devtools::check_rhub()
devtools::check_rhub()
devtools::release()
devtools::check_win_devel()
devtools::release()
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::release()
warnings()
devtools::document()
devtools::document()
person(given = "Mohsen", family = "Taheri Shalmani", role = c("aut", "cre"), email = "MohsenTaheriShalmani@gmail.com")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
help(pip2d)
library(ptinpoly) #to check whether a point is inside a 2D or 3D mesh or no
help(pip2d)
devtools::document()
rayTriangleIntersection
devtools::document()
devtools::document()
warnings()
help(Ginv)
matlib::Ginv
matrix
help(matlib::Ginv)
help("matrix")
base::matrix
MahalanobisDistance
help(rotMat)
help(rtruncnorm)
help(as.matrix)
as.matrix
help(integrate)
stats::integrate
help(which.min)
base::which.min
rgl::spheres3d
help(EA2DCM)
RSpincalc::DCM2EA
aperm
help(aperm)
EA2DCM
help(EA2DCM)
help(as.Q4)
help(as.matrix)
help(vert2points)
help(vcgRaySearch)
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
help(Matrix)
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
help(Directional)
devtools::document()
help(as.vector)
help(vectors3d)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#' @param plot_r_project Logical, enables plotting of projection along normals (default is TRUE).
#' @param plot_r_max Logical, enables plotting of max projection size (default is FALSE).
#' @return Graphical output.
#' @examples
#' # Load tube
#' data("colon3D")
#' plot_Elliptical_Tube(e_tube = colon3D,
#'                      plot_frames = FALSE,
#'                      add=FALSE)
#' @export
plot_Elliptical_Tube <- function(e_tube,
plot_boundary=TRUE,
plot_r_max=FALSE,
plot_r_project=TRUE,
plot_frames=TRUE,
frameScaling=NA,
plot_spine=TRUE,
plot_normal_vec=FALSE,
plot_skeletal_sheet=TRUE,
decorate=TRUE,
colSkeletalSheet="blue",
colorBoundary="blue",
userMatrix4plotOrientation=NA,
plotSignificantFeatures=FALSE,
p_values_v=NULL,
p_values_psi=NULL,
p_values_x=NULL,
p_values_a=NULL,
p_values_b=NULL,
lwdSignificant=4,
add=FALSE,
mainTitle="") {
numberOfFrames<-nrow(e_tube$spinalPoints3D)
spinalPoints3D<-e_tube$spinalPoints3D
materialFramesBasedOnParents<-e_tube$materialFramesBasedOnParents
materialFramesGlobalCoordinate<-e_tube$materialFramesGlobalCoordinate
frenetFramesBasedOnParents<-e_tube$frenetFramesBasedOnParents
frenetFramesGlobalCoordinate<-e_tube$frenetFramesGlobalCoordinate
ellipseRadii_a<-e_tube$ellipseRadii_a
ellipseRadii_b<-e_tube$ellipseRadii_b
slicingEllipsoids<-e_tube$slicingEllipsoids
skeletalSheetPoints<-e_tube$skeletalSheetPoints
r_project_lengths<-e_tube$r_project_lengths
tip_r_MaxVectors<-e_tube$tip_r_MaxVectors
tip_r_ProjectVectors<-e_tube$tip_r_ProjectVectors
connectionsLengths<-e_tube$connectionsLengths
if(length(connectionsLengths)==(numberOfFrames-1)){
connectionsLengths<-c(0,connectionsLengths)
}
if(is.na(frameScaling)){
frameScaling<-mean(connectionsLengths)/2
}
#plot
if(add==FALSE){
open3d()
}
#spine
if(plot_spine==TRUE){
plot3d(spinalPoints3D,type = 'l',expand = 10,box=FALSE,add = TRUE)
}
#boundary
if(plot_boundary==TRUE){
for (i in 1:dim(slicingEllipsoids)[3]) {
plot3d(rbind(slicingEllipsoids[,,i],slicingEllipsoids[1,,i]),type = 'l',col=colorBoundary,expand = 10,box=FALSE,add = TRUE)
}
for (i in 1:dim(slicingEllipsoids)[1]) {
plot3d(t(slicingEllipsoids[i,,]),type = 'l',col=colorBoundary,expand = 10,box=FALSE,add = TRUE)
}
}
#skeletal sheet
if(plot_skeletal_sheet==TRUE){
for (i in 1:dim(skeletalSheetPoints)[1]) {
plot3d(t(skeletalSheetPoints[i,,]),type = 'l',lwd=1,col=colSkeletalSheet,expand = 10,box=FALSE,add = TRUE)
}
for (i in 1:dim(skeletalSheetPoints)[3]) {
plot3d(skeletalSheetPoints[,,i],type = 'l',lwd=1,col=colSkeletalSheet,expand = 10,box=FALSE,add = TRUE)
}
}
# # critical vectors
# for (i in 1:dim(slicingEllipsoids)[3]) {
#   plot3d(rbind(spinalPoints3D[i,],criticalVectorsTip[i,]),type = 'l',lwd=4,col='orange',expand = 10,box=FALSE,add = TRUE)
#   # plot3d(rbind(colMeans(slicingEllipsoids[,,i]),criticalVectorsTip[i,]),type = 'l',lwd=4,col='red',expand = 10,box=FALSE,add = TRUE)
# }
if(plot_r_project==TRUE){
for (i in 1:dim(slicingEllipsoids)[3]) {
plot3d(rbind(spinalPoints3D[i,],tip_r_ProjectVectors[i,]),type = 'l',lty = 3,lwd=3.2,col='red',expand = 10,box=FALSE,add = TRUE)
# plot3d(rbind(spinalPoints3D[i,],tip_r_MaxVectors[i,]),type = 'l',lwd=2,col='orange',expand = 10,box=FALSE,add = TRUE)
}
}
if(plot_r_max==TRUE){
for (i in 1:dim(slicingEllipsoids)[3]) {
plot3d(rbind(spinalPoints3D[i,],tip_r_MaxVectors[i,]),type = 'l',lwd=2,col='orange',expand = 10,box=FALSE,add = TRUE)
}
}
if(plot_frames==TRUE){
plot3d(spinalPoints3D,type = 'l',lwd=4,col='darkblue',expand = 10,box=FALSE,add = TRUE)
#frames
matlib::vectors3d(spinalPoints3D+frameScaling*t(materialFramesGlobalCoordinate[1,,]),origin = spinalPoints3D,headlength = 0.1*frameScaling,radius = frameScaling/10, col="blue", lwd=frameScaling)
matlib::vectors3d(spinalPoints3D+frameScaling*t(materialFramesGlobalCoordinate[2,,]),origin = spinalPoints3D,headlength = 0.1*frameScaling,radius = frameScaling/10, col="red", lwd=frameScaling)
matlib::vectors3d(spinalPoints3D+frameScaling*t(materialFramesGlobalCoordinate[3,,]),origin = spinalPoints3D,headlength = 0.1*frameScaling,radius = frameScaling/10, col="green", lwd=frameScaling)
}
if(plot_normal_vec==TRUE){
#matlib::vectors3d(spinalPoints3D+frameScaling*t(frenetFramesGlobalCoordinate[1,,]),origin = spinalPoints3D,headlength = 0.1*frameScaling,radius = frameScaling/10, col="black", lwd=frameScaling)
matlib::vectors3d(spinalPoints3D+frameScaling*t(frenetFramesGlobalCoordinate[2,,]),origin = spinalPoints3D,headlength = 0.1*frameScaling,radius = frameScaling/10, col="black", lwd=frameScaling)
#matlib::vectors3d(spinalPoints3D+frameScaling*t(frenetFramesGlobalCoordinate[3,,]),origin = spinalPoints3D,headlength = 0.1*frameScaling,radius = frameScaling/10, col="black", lwd=frameScaling)
}
if(decorate==TRUE){
decorate3d(main = mainTitle)
}
if(plotSignificantFeatures==TRUE){
if(!is.null(p_values_a)){
colors<-pvalue_to_color(p_values_a)
for (i in 1:numberOfFrames) {
plot3d(rbind(slicingEllipsoids[,,i],slicingEllipsoids[1,,i]),type = 'l',
lwd=lwdSignificant,col=colors[i],expand = 10,box=FALSE,add = TRUE)
}
}
if(!is.null(p_values_b)){
colors<-pvalue_to_color(p_values_b)
for (i in 1:numberOfFrames) {
plot3d(rbind(slicingEllipsoids[,,i],slicingEllipsoids[1,,i]),type = 'l',
lwd=lwdSignificant,col=colors[i],expand = 10,box=FALSE,add = TRUE)
}
}
if(!is.null(p_values_x)){
colors<-pvalue_to_color(p_values_x)
for (i in 2:numberOfFrames) {
plot3d(rbind(spinalPoints3D[i-1,],
spinalPoints3D[i,]),type = 'l',
lwd=lwdSignificant,col=colors[i],expand = 10,box=FALSE,add = TRUE)
}
}
if(!is.null(p_values_psi)){
colors<-pvalue_to_color(p_values_psi)
for (i in 1:numberOfFrames) {
plot3d(rbind(slicingEllipsoids[,,i],slicingEllipsoids[1,,i]),type = 'l',
lwd=lwdSignificant,col=colors[i],expand = 10,box=FALSE,add = TRUE)
}
}
if(!is.null(p_values_v)){
colors<-pvalue_to_color(p_values_v)
for (i in 1:numberOfFrames) {
plot3d(rbind(slicingEllipsoids[,,i],slicingEllipsoids[1,,i]),type = 'l',
lwd=lwdSignificant,col=colors[i],expand = 10,box=FALSE,add = TRUE)
}
}
decorate3d(main = mainTitle)
}
if(!anyNA(userMatrix4plotOrientation)){
par3d(userMatrix=userMatrix4plotOrientation)
}
}
plot_Elliptical_Tube(tube_A)
plot_Elliptical_Tube(tube_A)
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
Directional::rot.matrix()
Directional::rotation()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(ETRep)
pkgload::dev_help('intrinsic_Transformation_Elliptical_Tubes')
devtools::document()
devtools::document()
devtools::document()
library(ETRep)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
