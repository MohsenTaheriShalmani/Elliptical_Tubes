library(shapes)
help(#' ETRep Package: Analysis of Elliptical Tubes Under the Relative Curvature Condition
#'
#' The `ETRep` package provides functions for analyzing elliptical tubes (ETReps), including constructing, transforming, validating, and simulating elliptical tube representations under the Relative Curvature Condition (RCC).
#'
#' @section Main Functions:
#' - `create_Elliptical_Tube`: Constructs a discrete ETRep.
#' - `plot_Elliptical_Tube`: Plots an ETRep.
#' - `check_Tube_Legality`: Validates the ETRep based on the RCC.
#' - `nonIntrinsic_Transformation_Elliptical_Tubes` and `intrinsic_Transformation_Elliptical_Tubes`: Perform transformations between ETReps.
#' - `nonIntrinsic_mean_tube` and `intrinsic_mean_tube`: Calculate the non-intrinsic and intrinsic means of ETReps.
#' - `simulate_etube`: Generates random samples of ETReps based on a reference tube.
#'
#' @docType package
#' @name ETRep
#'
#' @import shapes rgl Morpho matlib RiemBase doBy plotrix Directional RSpincalc rotations SphericalCubature Rvcg fields Matrix pracma truncnorm ggplot2 reshape2 dplyr
NULL)
help(shapes)
help(shapes::procOPA)
help(procOPA)
??shapes
library(ETRep)
numberOfFrames<-15
EulerAngles_alpha<-c(rep(0,numberOfFrames))
EulerAngles_beta<-c(rep(-pi/20,numberOfFrames))
EulerAngles_gamma<-c(rep(0,numberOfFrames))
EulerAngles_Matrix<-cbind(EulerAngles_alpha,EulerAngles_beta,EulerAngles_gamma)
tube <- create_Elliptical_Tube(numberOfFrames = numberOfFrames,
method = "basedOnEulerAngles",
EulerAngles_Matrix = EulerAngles_Matrix,
ellipseResolution = 10,
ellipseRadii_a = rep(3, numberOfFrames),
ellipseRadii_b = rep(2, numberOfFrames),
connectionsLengths = rep(4, numberOfFrames),
plotting = TRUE)
check_Tube_Legality(tube)
help(check_Tube_Legality)
help(check_Tube_Legality)
devtools::document()
help(check_Tube_Legality)
library(ETRep)
devtools::document()
usethis::use_gpl_license(version = 3)
devtools::document()
devtools::document()
library(shapes)
devtools::document()
# Create e-tube A
numberOfFrames<-12
addedFrames1<-100
addedFrames2<-40
ellipseResolution<-4
EulerAngles_alpha_A<-c(rep(0,addedFrames1),rep(pi/12,numberOfFrames),rep(0,addedFrames2),rep(-pi/12,numberOfFrames),rep(0,addedFrames2))
EulerAngles_beta_A<--c(rep(0,addedFrames1),rep(0,numberOfFrames),rep(0,addedFrames2),rep(0,numberOfFrames),rep(0,addedFrames2))
EulerAngles_gamma_A<--c(rep(0,addedFrames1),rep(0,numberOfFrames),rep(0,addedFrames2),rep(0,numberOfFrames),rep(0,addedFrames2))
ellipseRadii_a_A<-seq(1,4,length.out=numberOfFrames+addedFrames1+addedFrames2+numberOfFrames+addedFrames2)
ellipseRadii_b_A<-seq(0.9,2,length.out=numberOfFrames+addedFrames1+addedFrames2+numberOfFrames+addedFrames2)
connectionsLengths_A<-rep(1,numberOfFrames+addedFrames1+addedFrames2+numberOfFrames+addedFrames2)
tube_A<-create_Elliptical_Tube(numberOfFrames=length(ellipseRadii_a_A),
EulerAngles_Matrix =cbind(EulerAngles_alpha_A,EulerAngles_beta_A,EulerAngles_gamma_A),
method="basedOnEulerAngles",
ellipseResolution=ellipseResolution,
ellipseRadii_a=ellipseRadii_a_A,
ellipseRadii_b=ellipseRadii_b_A,
connectionsLengths=connectionsLengths_A,
plotting=FALSE)
# Plot
plot_Elliptical_Tube(e_tube = tube_A,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = FALSE)
# Check tube eligibility
check_Tube_Legality(tube = tube_A)
# Create e-tube B
EulerAngles_alpha_B<--c(rep(0,addedFrames1),rep(pi/100,numberOfFrames),rep(pi/100,addedFrames2),rep(pi/100,numberOfFrames),rep(pi/100,addedFrames2))
EulerAngles_beta_B<--c(rep(0,addedFrames1),rep(0,numberOfFrames),rep(0,addedFrames2),rep(0,numberOfFrames),rep(0,addedFrames2))
EulerAngles_gamma_B<--c(rep(0,addedFrames1),rep(0,numberOfFrames),rep(0,addedFrames2),rep(0,numberOfFrames),rep(0,addedFrames2))
ellipseRadii_a_B<-seq(1,30,length.out=numberOfFrames+addedFrames1+addedFrames2+numberOfFrames+addedFrames2)
ellipseRadii_b_B<-seq(0.9,10,length.out=numberOfFrames+addedFrames1+addedFrames2+numberOfFrames+addedFrames2)
connectionsLengths_B<-rep(1,numberOfFrames+addedFrames1+addedFrames2+numberOfFrames+addedFrames2)
tube_B<-create_Elliptical_Tube(numberOfFrames=length(ellipseRadii_a_A),
EulerAngles_Matrix =cbind(EulerAngles_alpha_B,EulerAngles_beta_B,EulerAngles_gamma_B),
method="basedOnEulerAngles",
ellipseResolution=ellipseResolution,
ellipseRadii_a=ellipseRadii_a_B,
ellipseRadii_b=ellipseRadii_b_B,
connectionsLengths=connectionsLengths_B,
plotting=FALSE)
# Plot
plot_Elliptical_Tube(e_tube = tube_B,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = FALSE)
save(tube_A,file = "tube_A.Rdata")
save(tube_B,file = "tube_B.Rdata")
getwd()
# Simulation
numberOfSimulation<-5
# Scenario 1 simulation based on small variation
sd_v=1e-03
sd_psi=1e-03
sd_x=1e-04
sd_a=1e-04
sd_b=1e-04
# Load data
load("files/colone3D.Rdata")
referenceTube<-colone3D
numberOfFrames<-nrow(referenceTube$spinalPoints3D)
numberOfEllispePoints<-nrow(referenceTube$slicingEllipsoids[,,1])
# Plot the reference tube
plot_Elliptical_Tube(referenceTube,
plot_spine = TRUE,
plot_frames = FALSE,
decorate = FALSE,
plot_skeletal_sheet = FALSE,
plot_r_project = FALSE)
# Simulation
numberOfSimulation<-5
# Scenario 1 simulation based on small variation
sd_v=1e-03
sd_psi=1e-03
sd_x=1e-04
sd_a=1e-04
sd_b=1e-04
if(TRUE){
set.seed(2)
simulatedTubes<-simulate_etube(referenceTube = referenceTube,
numberOfSimulation=numberOfSimulation,
sd_v=sd_v,
sd_psi=sd_psi,
sd_x=sd_x,
sd_a=sd_a,
sd_b=sd_b,
rangeSdScale=c(1,2),
plotting=FALSE)
boundaryPointsAllTubes<-array(NA,dim = c(numberOfFrames*numberOfEllispePoints,3,length(simulatedTubes)))
for (j in 1:length(simulatedTubes)) {
boundaryPointsAllTubes[,,j]<-simulatedTubes[[j]]$boundaryPoints
}
procAll<-procGPA(boundaryPointsAllTubes,scale = FALSE,reflect = FALSE)
procAlignedTubes<-procAll$rotated
# plot simulated tubes
open3d()
for (j in 1:dim(procAlignedTubes)[3]) {
color_spectrum <- colorRampPalette(c("grey","darkgrey"))
colors <- color_spectrum(length(simulatedTubes))
plotProcTube(boundaryPoints = procAlignedTubes[,,j],
numberOfEllispePoints = dim(referenceTube$slicingEllipsoids[,,1])[1],
colorBoundary = colors[j],
colorSpine = "black")
}
#decorate3d()
mean_intrinsic<-intrinsic_mean_tube(tubes = simulatedTubes,
type = "sizeAndShapeAnalysis",
plotting = FALSE)
mean_nonIntrinsic<-nonIntrinsic_mean_tube(tubes = simulatedTubes,
type = "sizeAndShapeAnalysis",
plotting = FALSE)
procMean<-procAll$mshape
#proc alignment for visualization
boundaryPointsIntrinsicMean<-mean_intrinsic$boundaryPoints
boundaryPointsNonIntrinsicMean<-mean_nonIntrinsic$boundaryPoints
procOPAMeans1<-procOPA(A = procMean,B = boundaryPointsIntrinsicMean,scale = FALSE,reflect = FALSE)
intrinsicMeanProcAligned<-procOPAMeans1$Bhat
procOPAMeans2<-procOPA(A = procMean,B = boundaryPointsNonIntrinsicMean,scale = FALSE,reflect = FALSE)
nonIntrinsicMeanProcAligned<-procOPAMeans2$Bhat
#plot intrinsic mean
open3d()
#plot non-intrinsic mean
plotProcTube(boundaryPoints = intrinsicMeanProcAligned,
numberOfEllispePoints = dim(referenceTube$slicingEllipsoids[,,1])[1],
colorBoundary = "darkblue",
colorSpine = "black")
#plot non-intrinsic mean
plotProcTube(boundaryPoints = nonIntrinsicMeanProcAligned,
numberOfEllispePoints = dim(referenceTube$slicingEllipsoids[,,1])[1],
colorBoundary = "red",
colorSpine = "black")
#plot proc mean
plotProcTube(boundaryPoints = procMean,
numberOfEllispePoints = dim(referenceTube$slicingEllipsoids[,,1])[1],
colorBoundary = "darkgreen",
colorSpine = "black")
}
simulatedColones<-simulatedTubes
save(simulatedColones,file = "simulatedColones.Rdata")
help("gorf.dat")
simulatedColons<-simulatedColones
save(simulatedColons,file = "simulatedColons.Rdata")
nrow(tube_A$spinalPoints3D)
nrow(tube_B$spinalPoints3D)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
colon3D
colone3D
colon3D<-colone3D
save(colon3D,file = "colon3D.Rdata")
devtools::load_all()
devtools::document()
devtools::document()
help("colon3D")
help("simulatedColons")
devtools::document()
devtools::document()
check_Tube_Legality(colon3D)
devtools::document()
devtools::document()
devtools::load_all()
load(colon3D)
devtools::document()
devtools::load_all()
data(colon3D)
warnings()
devtools::clean_dll() # Clean package compiled files
colon3D
devtools::load_all()
colon3D
devtools::document() # Update documentation
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::check() # Run checks
save(tube_A,file = "tube_A.rda")
save(tube_B,file = "tube_B.rda")
save(colon3D,file = "colon3D.rda")
save(simulatedColons,file = "simulatedColons.rda")
data("colon3D")
data("simulatedColons")
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
# Load tube
data("colon3D")
sd_v=1e-01
sd_psi=1e-01
sd_x=1e-04
sd_a=1e-04
sd_b=1e-04
simulate_etube(referenceTube = colon3D, numberOfSimulation = 5, sd_v = sd_v, sd_psi = sd_psi, sd_x = sd_x, sd_a = sd_a, sd_b = sd_b, rangeSdScale = c(1, 2), plotting = TRUE)
data("colon3D")
sd_v=1e-03
sd_psi=1e-03
sd_x=1e-04
sd_a=1e-04
sd_b=1e-04
simulate_etube(referenceTube = colon3D, numberOfSimulation = 5, sd_v = sd_v, sd_psi = sd_psi, sd_x = sd_x, sd_a = sd_a, sd_b = sd_b, rangeSdScale = c(1, 2), plotting = TRUE)
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
data("colon3D")
#Set Parameters
sd_v<-sd_psi<-1e-03
sd_x<-sd_a<-sd_b<-1e-04
numberOfSimulation<-5
random_Tubes<-simulate_etube(referenceTube = colon3D, numberOfSimulation = numberOfSimulation, sd_v = sd_v, sd_psi = sd_psi, sd_x = sd_x, sd_a = sd_a, sd_b = sd_b, rangeSdScale = c(1, 2), plotting = FALSE)
# Plotting
for (i in 1:numberOfSimulation) {
plot_Elliptical_Tube(e_tube = random_Tubes[[i]],plot_frames = FALSE,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = TRUE)
}
# Plotting
for (i in 1:numberOfSimulation) {
plot_Elliptical_Tube(e_tube = random_Tubes[[i]],colorBoundary = "lightblue",plot_frames = FALSE,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = TRUE)
}
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
FALSE
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
data("colon3D")
#Set Parameters
sd_v<-sd_psi<-1e-03
sd_x<-sd_a<-sd_b<-1e-04
numberOfSimulation<-5
random_Tubes<-simulate_etube(referenceTube = colon3D, numberOfSimulation = numberOfSimulation, sd_v = sd_v, sd_psi = sd_psi, sd_x = sd_x, sd_a = sd_a, sd_b = sd_b, rangeSdScale = c(1, 2), plotting = FALSE)
# Plotting
for (i in 1:numberOfSimulation) {
plot_Elliptical_Tube(e_tube = random_Tubes[[i]],plot_frames = FALSE,plot_skeletal_sheet = FALSE,plot_r_project = FALSE,plot_r_max = FALSE,add = TRUE)
}
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::release()
devtools::spell_check()
devtools::release()
devtools::check_rhub()
devtools::check_rhub()
devtools::release()
devtools::check_win_devel()
devtools::release()
devtools::document()
devtools::clean_dll() # Clean package compiled files
devtools::build() # Rebuild the package
devtools::release()
warnings()
devtools::document()
devtools::document()
person(given = "Mohsen", family = "Taheri Shalmani", role = c("aut", "cre"), email = "MohsenTaheriShalmani@gmail.com")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
